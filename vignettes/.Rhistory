devtools::check()
devtools::check()
```{r}
```{r load_weightprog}
library(sjPlot)
library(sjPlot)
library(sjmisc)
sjt.lm(fit) #show results
fit <- lm(Marginal_Weight ~ Distance + Time_Asleep + Time_Deep +
Time_Light + Time_Bed, data=base2)
base2 <- hello %>%
mutate(Time_Deep = Deep_Sleep * Time_Asleep / 100) %>%
mutate(Time_Light = Light_Sleep * Time_Asleep / 100) %>%
select("Distance","Time_Bed", "Time_Asleep", "Time_Deep", "Time_Light", "Marginal_Weight")
library("googlesheets")
mykey <- gs_url("https://docs.google.com/spreadsheets/d/10KwAd2PL4FXbNrWkhLstzeuKvR9NYhfvegtPdjfELcM/edit?usp=sharing",
lookup=FALSE, visibility = "public")
mykey <- gs_url("https://docs.google.com/spreadsheets/d/10KwAd2PL4FXbNrWkhLstzeuKvR9NYhfvegtPdjfELcM/edit?usp=sharing",
lookup=FALSE, visibility = "public")
hello <- gs_read(mykey)
hello$absmargweight <- abs(hello$Marginal_Weight)
hello$posnegmarg <- c("Loss","Maintain","Gain")[sign(hello$Marginal_Weight)+2]
colnames(hello)[colnames(hello)=="posnegmarg"] <- "Class"
dd = as.Date(hello$Date, format = "%m/%d/%Y")
library(tidyverse)
library(tidyr)
base <- gather(base, Time_Asleep, value, -Day) %>%
setNames(., c("Day", "Time", "value"))
library(plyr)
base <- gather(base, Time_Asleep, value, -Day) %>%
setNames(., c("Day", "Time", "value"))
base <- hello %>%
mutate(Time_Deep = Deep_Sleep * Time_Asleep / 100) %>%
mutate(Time_Light = Light_Sleep * Time_Asleep / 100) %>%
select("Day", "Time_Bed", "Time_Asleep", "Time_Sleep", "Time_Deep", "Time_Light")
base <- gather(base, Time_Asleep, value, -Day) %>%
setNames(., c("Day", "Time", "value"))
base2 <- hello %>%
mutate(Time_Deep = Deep_Sleep * Time_Asleep / 100) %>%
mutate(Time_Light = Light_Sleep * Time_Asleep / 100) %>%
select("Distance","Time_Bed", "Time_Asleep", "Time_Deep", "Time_Light", "Marginal_Weight")
fit <- lm(Marginal_Weight ~ Distance + Time_Asleep + Time_Deep +
Time_Light + Time_Bed, data=base2)
library(sjPlot)
library(sjmisc)
sjt.lm(fit) #show results
?tidyr
?tidyverse
require(memisc)
mtable1 <- mtable('Model 1' = fit)
library(pander)
require(memisc)
mtable1 <- mtable('Model 1' = fit)
pander(mtable1)
pander(fit)
twl <- twoway_lineplot(hello, dd, hello$Weight, "Weight (kg)")
twoway_lineplot <- function(data, date, yname, ylabel){
ggplot(data, aes(x = date, y = yname)) +
geom_line(col="black") +
xlab("") +
ylab(ylabel) +
theme_bw()
}
twoway_lineplotf <- function(data, xname, yname, bycolor, bywrap, xlabel, ylabel) {
p = ggplot(data, aes_string(x=xname, y=yname, colour=bycolor)) +
geom_line() +
facet_wrap(as.formula(paste("~", bywrap)), nrow = 2, scales="free") +
xlab(xlabel) +
ylab(ylabel)
return(p)
}
twl <- twoway_lineplot(hello, dd, hello$Weight, "Weight (kg)")
twl
twl2 <- twoway_lineplotf(hello, xname = "Distance", yname = "Deep_Sleep",
bycolor = "Class", bywrap = "Day",
"Distance (km)", "Deep Sleep (%)")
twl2
twl <- twoway_lineplot(hello, dd, hello$Weight, "Weight (kg)")
library("TTR")
install.packages("TTR")
library(TTR)
birthstimeseriescomponents <- decompose(base)
?filter
install.packages("astsa")
?filter
library(asta)
library(astsa)
?filter
??filter
?decompose
decomposedRes <- decompose(base, type="mult") # use type = "additive" for additive components
decomposedRes <- decompose(hello, type="mult") # use type = "additive" for additive components
View(base2)
View(base)
require(reshape2)
View(hello)
dcast(hello, Weight + Day ~ Week_Number, value.var="S")
dcast(hello, Distance + Day ~ Week_Number, value.var="Weight")
attemptnumber200 <- dcast(hello, Distance + Day ~ Week_Number, value.var="Weight")
View(attemptnumber200)
attemptnumber200 <- dcast(hello, Day ~ Week_Number, value.var="Weight")
decomposedRes <- decompose(hello, type="mult") # use type = "additive" for additive components
decomposedRes <- decompose(base3, type="mult") # use type = "additive" for additive components
base3 <- dcast(hello, Day ~ Week_Number, value.var="Weight")
decomposedRes <- decompose(base3, type="mult") # use type = "additive" for additive components
decomposedRes <- decompose(base3) # use type = "additive" for additive components
?ts
base 3 <- ts(base3, 14)
base3 <- ts(base3, 14)
decomposedRes <- decompose(base3) # use type = "additive" for additive components
base3 <- base3[-c(,1)]
base3 <- base3[-c( ,1)]
base3 <- base3[-c(.,1)]
base3 <- base3[,-1)]
base3 <- base3[,-1]
base3 <- dcast(hello, Day ~ Week_Number, value.var="Weight")
base3 <- base3[,-1]
View(base3)
base3 <- base3[,-1]
base3 <- base3[,-12]
fuck <- ts(base3, 11)
decomposedRes <- decompose(fuck) # use type = "additive" for additive components
base3m <- as.matrix((base3))
fuck <- ts(base3m, 11)
decomposedRes <- decompose(fuck) # use type = "additive" for additive components
fuck <- ts(base3m, frequency = 11)
decomposedRes <- decompose(fuck) # use type = "additive" for additive components
?filter
decomposedRes <- decompose(fuck) # use type = "additive" for additive components
base3 <- dcast(hello, Day ~ Week_Number, value.var="Weight")
base3m <- colMeans(base3)
View(base3)
base3m <- colMeans(base3[2:14])
base3m
base3m <- colMeans(base3[2:14], na.rm=TRUE)
base3m
View(hello)
?diff
ggplot(data, aes(x = date, y = yname)) +
rind <- c(TRUE, diff(hello$Date_Number) != 0)
rind <- c(TRUE, diff(hello$Date_Number) != 0)
rind <- c(TRUE, diff(hello$Date_Number) != 3)
rind
diff(1:10, 2)
?if
d
??if
l
print("TRUE")
if(hello$Date_Number =3){
if(hello$Date_Number ==3){
print("TRUE")
}
within(hello, hello$point <- ifelse(hello$Date_Number == 3, 1,
ifelse(hello$Date_Number != 3, 0))) #same result
within(hello, hello$point <- ifelse(hello$Date_Number == 3, 1)) #same result
?ifellse
?ifelse
within(hello, hello$point <- ifelse(hello$Date_Number == 3, 1,
ifelse(hello$Date_Number != 3, 0))) #same result
within(hello, hello$point <- ifelse(hello$Date_Number == 3, 1, 0))) #same result
within(hello, hello$point <- ifelse(hello$Date_Number == 3, 1, 0)) #same result
library("googlesheets")
mykey <- gs_url("https://docs.google.com/spreadsheets/d/10KwAd2PL4FXbNrWkhLstzeuKvR9NYhfvegtPdjfELcM/edit?usp=sharing",
lookup=FALSE, visibility = "public")
View(hello)
mykey <- gs_url("https://docs.google.com/spreadsheets/d/10KwAd2PL4FXbNrWkhLstzeuKvR9NYhfvegtPdjfELcM/edit?usp=sharing",
lookup=FALSE, visibility = "public")
hello <- gs_read(mykey)
View(hello)
ggplot(hello, aes(Day)) +
geom_line(aes(y = hello$Weight, color = "red")) +
geom_line(aes(y = hello$Week_Average, color = "black"))
ggplot(hello, aes(Day_Number)) +
geom_line(aes(y = hello$Weight, color = "red")) +
geom_line(aes(y = hello$Week_Average, color = "black"))
ggplot(hello, aes(Day_Number)) +
geom_line(aes(y = hello$Weight, color = "Weight Over Time")) +
geom_line(aes(y = hello$Week_Average, color = "Average Weight per Week"))
ggplot(hello, aes(Day_Number)) +
geom_line(aes(y = hello$Weight, color = "Weight Over Time")) +
geom_point(aes(y = hello$Week_Average, color = "Average Weight per Week"))
?geom_point
ggplot(hello, aes(x = Day_Number, group=1)) +
geom_line(aes(y = hello$Weight, color = "Weight Over Time")) +
geom_point(aes(y = hello$Week_Average, color = "Average Weight per Week"), )
ggplot(hello, aes(x = Day_Number, group=1)) +
geom_line(aes(y = hello$Weight, color = "Weight Over Time")) +
geom_line(aes(y = hello$Week_Average, color = "Average Weight per Week"), )
ggplot(hello, aes(x = Day_Number, group=1)) +
geom_line(aes(y = hello$Weight, color = "Weight Over Time", group = 1)) +
geom_line(aes(y = hello$Week_Average, color = "Average Weight per Week", group=1))
ggplot(hello, aes(x = Day_Number, group=1)) +
geom_line(aes(y = hello$Weight, color = "Weight Over Time", group = 1)) +
geom_point(aes(y = hello$Week_Average, color = "Average Weight per Week", group=1))
ggplot(hello, aes(x = Day_Number, group=1)) +
geom_line(aes(y = hello$Weight, color = "Weight Over Time", group = 1)) +
geom_point(aes(y = hello$Week_Average, color = "Average Weight per Week", group=1)) +
geom_point(aes(y = hello$Week_Average, color = "Average Weight per Week", group=1))
ggplot(hello, aes(x = Day_Number, group=1)) +
geom_line(aes(y = hello$Weight, color = "Weight Over Time", group = 1)) +
geom_line(aes(y = hello$Week_Average, color = "Average Weight per Week", group=1)) +
geom_point(aes(y = hello$Week_Average, color = "Average Weight per Week", group=1))
ggplot(hello, aes(x = Day_Number)) +
geom_line(aes(y = hello$Weight, color = "Weight Over Time", group = 1)) +
geom_line(aes(y = hello$Week_Average, color = "Average Weight per Week", group=1)) +
geom_point(aes(y = hello$Week_Average, color = "Average Weight per Week", group=1))
ggplot(hello) +
geom_line(aes(x = Day_Number, y = hello$Weight, color = "Weight Over Time", group = 1)) +
geom_line(aes(x = Day_Number, y = hello$Week_Average, color = "Average Weight per Week", group=1)) +
geom_point(aes(x = Day_Number, y = hello$Week_Average, color = "Average Weight per Week", group=1))
ggplot(hello) +
geom_line(aes(x = Day_Number, y = hello$Weight, color = "Weight Over Time", group = 1)) +
geom_line(aes(x = Day_Number, y = hello$Week_Average, color = "Average Weight per Week", group=1))
ggplot(hello) +
geom_line(aes(x = Day_Number, y = hello$Weight, color = "Weight Over Time", group = 1)) +
geom_point(aes(x = Day_Number, y = hello$Week_Average, color = "Average Weight per Week", group=1)) +
geom_line(aes(group=1))
ggplot(hello) +
geom_line(aes(x = Day_Number, y = Weight, color = "Weight Over Time", group = 1)) +
geom_point(aes(x = Day_Number, y = Week_Average, color = "Average Weight per Week", group=1)) +
geom_line(aes(group=1))
ggplot(hello) +
geom_line(aes(x = Day_Number, y = Weight, color = "Weight Over Time", group = 1)) +
geom_point(aes(x = Day_Number, y = Week_Average, color = "Average Weight per Week", group=1))
ggplot(hello) +
geom_line(aes(x = Day_Number, y = Weight, color = "Weight Over Time", group = 1)) +
geom_point(aes(x = Day_Number, y = Week_Average, color = "Average Weight per Week", group=1)) +
geom_line(aes(x = Day_Number, y = Week_Average, color = "Average Weight per Week", group=1))
ggplot(hello) +
geom_line(aes(x = Day_Number, y = Weight, color = "Weight Over Time", group = 1)) +
geom_point(aes(x = Day_Number, y = Week_Average, color = "Average Weight per Week", group=1)) +
geom_line()
ggplot(hello) +
geom_line(aes(x = Day_Number, y = Weight, color = "Weight Over Time", group = 1)) +
geom_point(aes(x = Day_Number, y = Week_Average, color = "Average Weight per Week", group=1)) +
geom_line(aes(group=1))
twoway_lineplot <- function(data, date, yname, ylabel, ymean, ymlabel){
ggplot(data) +
geom_line(aes(x = date, y = yname, color = ylabel)) +
geom_point(aes(x = date, y = ymean, color = ymlabel))
}
twoway_lineplot(hello, Day_Number, Weight, "Weight Over Time", Week_Average, "Average Weight per Week")
twoway_lineplot(hello, hello$Day_Number, Weight, "Weight Over Time", hello$Week_Average, "Average Weight per Week")
twoway_lineplot <- function(data, date, yname, ylabel, ymean, ymlabel){
ggplot(data) +
geom_line(aes(x = date, y = yname, color = ylabel)) +
geom_point(aes(x = date, y = ymean, color = ymlabel))
}
twoway_lineplot(hello, hello$Day_Number, hello$Weight, "Weight Over Time", hello$Week_Average, "Average Weight per Week")
twoway_lineplot(hello, hello$Day_Number, hello$Weight,
"Weight Over Time", hello$Week_Average,
"Average Weight per Week")
twoway_lineplot <- function(data, date, yname, ylabel, ymean, ymlabel){
ggplot(data) +
geom_line(aes(x = date, y = yname, color = ylabel)) +
geom_point(aes(x = date, y = ymean, color = ymlabel)) +
xlab("") + ylab(ylabel) + themebw()
}
twoway_lineplot(hello, hello$Day_Number, hello$Weight,
"Weight Over Time", hello$Week_Average,
"Average Weight per Week")
twoway_lineplot <- function(data, date, yname, ylabel, ymean, ymlabel){
ggplot(data) +
geom_line(aes(x = date, y = yname, color = ylabel)) +
geom_point(aes(x = date, y = ymean, color = ymlabel)) +
xlab("") + ylab(ylabel) + theme_bw()
}
twoway_lineplot(hello, hello$Day_Number, hello$Weight,
"Weight Over Time", hello$Week_Average,
"Average Weight per Week")
ggplot(data) +
geom_line(aes(x = date, y = yname, color = ylabel)) +
geom_point(aes(x = date, y = ymean, color = ymlabel)) +
xlab(xlabel) + ylab(ylabel) + theme_bw()
ggplot(data) +
geom_line(aes(x = date, y = yname, color = ylabel)) +
geom_point(aes(x = date, y = ymean, color = ymlabel)) +
xlab(xlabel) + ylab(ylabel) + theme_bw()
twoway_lineplot <- function(data, date, yname, xlabel, ylabel, ymean, ymlabel){
ggplot(data) +
geom_line(aes(x = date, y = yname, color = ylabel)) +
geom_point(aes(x = date, y = ymean, color = ymlabel)) +
xlab(xlabel) + ylab(ylabel) + theme_bw()
}
twoway_lineplot(hello, hello$Day_Number, hello$Weight,
"fuck", "Weight Over Time", hello$Week_Average,
"Average Weight per Week")
twoway_lineplot <- function(data, date, yname, xlabel, ylabel, ymean, ymlabel, guidecolor){
ggplot(data) +
geom_line(aes(x = date, y = yname, color = ylabel)) +
geom_point(aes(x = date, y = ymean, color = ymlabel)) +
xlab(xlabel) + ylab(ylabel) + theme_bw() +
guides(color = guide_legend(title = guidecolor, title.position = "left"))
}
twoway_scatterg(hello, hello$Distance, hello$Time_Asleep,
hello$Marginal_Change, hello$Class,
"Distance Walked (km)", "Time Asleep (hrs)",
"Change in Weight", "Class", "Weight Statistic")
twoway_lineplot(hello, date = hello$Day_Number, yname = hello$Weight,
xlabel = "Day Number", ylabel = "Weight Over Time", ymean = hello$Week_Average,
ymlabel = "Average Weight per Week")
twoway_lineplot(hello, date = hello$Day_Number, yname = hello$Weight,
xlabel = "Day Number", ylabel = "Weight Over Time", ymean = hello$Week_Average,
ymlabel = "Average Weight per Week", "Weight Statistic")
kable(base3m) #Mean Weight of Each Week (Week_Average)
library(kable)
library(kableExtra)
kable(base3m) #Mean Weight of Each Week (Week_Average)
pander(base3m) #Mean Weight of Each Week (Week_Average)
base3m <- data.frame(colMeans(base3[2:14], na.rm=TRUE))
View(base3m)
colnames(base3m)[1] <- "Weight by Week Number"
pander(base3m) #Mean Weight of Each Week (Week_Average)
base3m <- data.frame(transpose(colMeans(base3[2:14], na.rm=TRUE)))
base3m <- transpose(data.frame(colMeans(base3[2:14], na.rm=TRUE)))
pander(base3m) #Mean Weight of Each Week (Week_Average)
colnames(base3m)[1] <- "Weight by Week Number"
base3m <- transpose(data.frame(colMeans(base3[2:14], na.rm=TRUE)))
base3m <- t(data.frame(colMeans(base3[2:14], na.rm=TRUE)))
View(base3m)
rownames(base3m)[1] <- "Weight by Week Number"
pander(base3m) #Mean Weight of Each Week (Week_Average)
twoway_lineplotf <- function(data, xname, yname, bycolor, bywrap, xlabel, ylabel) {
p = ggplot(data, aes_string(x=xname, y=yname, colour=bycolor)) +
geom_point(method='lm') +
facet_wrap(as.formula(paste("~", bywrap)), nrow = 2, scales="free") +
xlab(xlabel) +
ylab(ylabel)
return(p)
}
twoway_lineplotf(hello, xname = "Distance", yname = "Deep_Sleep",
bycolor = "Class", bywrap = "Day",
"Distance (km)", "Deep Sleep (%)")
twoway_lineplotf <- function(data, xname, yname, bycolor, bywrap, xlabel, ylabel) {
p = ggplot(data, aes_string(x=xname, y=yname, colour=bycolor)) +
geom_point() +
geom_smooth(method='lm') +
facet_wrap(as.formula(paste("~", bywrap)), nrow = 2, scales="free") +
xlab(xlabel) +
ylab(ylabel)
return(p)
}
twoway_lineplotf(hello, xname = "Distance", yname = "Deep_Sleep",
bycolor = "Class", bywrap = "Day",
"Distance (km)", "Deep Sleep (%)")
twkm + scale_colour_manual(values = c("red", "blue", "green", "purple", "pink"))
twoway_kmeans <- function(xname, yname, kmax, xlabel, ylabel, guidecolor) {
data.km <- cbind(x1 = xname, x2 = yname)
kclusts <- data.frame(kmax=1:kmax) %>% group_by(kmax) %>% do(kclust=kmeans(data.km, .$kmax))
#do kmeans on data for each k-number of clusters
assignments <- kclusts %>% group_by(kmax) %>% do(augment(.$kclust[[1]], data.km))
twkm <- ggplot(assignments, aes_string(x = "x1", y = "x2")) + geom_point(aes(color= .cluster)) +
facet_wrap(~ kmax) + xlab(xlabel) + ylab(ylabel) +
guides(color = guide_legend(title = guidecolor, title.position = "left", nrow=1)) +
theme(legend.position="bottom")
twkm + scale_colour_manual(values = c("red", "blue", "green", "purple", "pink"))
}
twoway_kmeans(hello$Distance, hello$Deep_Sleep, 5,
"Distance (km)", "Deep Sleep (%)", "Cluster(s) by Color")
?augment
library(broom)
twoway_kmeans <- function(xname, yname, kmax, xlabel, ylabel, guidecolor) {
data.km <- cbind(x1 = xname, x2 = yname)
kclusts <- data.frame(kmax=1:kmax) %>% group_by(kmax) %>% do(kclust=kmeans(data.km, .$kmax))
#do kmeans on data for each k-number of clusters
assignments <- kclusts %>% group_by(kmax) %>% do(augment(.$kclust[[1]], data.km))
twkm <- ggplot(assignments, aes_string(x = "x1", y = "x2")) + geom_point(aes(color= .cluster)) +
facet_wrap(~ kmax) + xlab(xlabel) + ylab(ylabel) +
guides(color = guide_legend(title = guidecolor, title.position = "left", nrow=1)) +
theme(legend.position="bottom")
twkm + scale_colour_manual(values = c("red", "blue", "green", "purple", "pink"))
}
twoway_kmeans(hello$Distance, hello$Deep_Sleep, 5,
"Distance (km)", "Deep Sleep (%)", "Cluster(s) by Color")
View(hello)
hello$absmargweight <- abs(hello$Marginal_Weight)
hello$posnegmarg <- c("Loss","Maintain","Gain")[sign(hello$Marginal_Weight)+2]
colnames(hello)[colnames(hello)=="absmargweight"] <- "Marginal_Change"
colnames(hello)[colnames(hello)=="posnegmarg"] <- "Class"
twoway_kmeans <- function(xname, yname, kmax, xlabel, ylabel, guidecolor, byobj) {
data.km <- cbind(x1 = xname, x2 = yname)
kclusts <- data.frame(kmax=1:kmax) %>% group_by(kmax) %>% do(kclust=kmeans(data.km, .$kmax))
#do kmeans on data for each k-number of clusters
assignments <- kclusts %>% group_by(kmax) %>% do(augment(.$kclust[[1]], data.km))
twkm <- ggplot(assignments, aes_string(x = "x1", y = "x2")) + geom_point(aes(color= .cluster)) +
facet_wrap(~ kmax) + xlab(xlabel) + ylab(ylabel) +
geom_text(aes(label=byobj),hjust=0, vjust=0, cex=3) +
guides(color = guide_legend(title = guidecolor, title.position = "left", nrow=1)) +
theme(legend.position="bottom")
twkm
}
twoway_kmeans(hello$Distance, hello$Deep_Sleep, 5,
"Distance (km)", "Deep Sleep (%)", "Cluster(s) by Color", hello$Class)
View(hello)
twkm <- ggplot(assignments, aes_string(x = "x1", y = "x2")) + geom_point(aes(color= .cluster)) +
facet_wrap(~ kmax) + xlab(xlabel) + ylab(ylabel) +
guides(color = guide_legend(title = guidecolor, title.position = "left", nrow=1)) +
theme(legend.position="bottom")
twoway_kmeans <- function(xname, yname, kmax, xlabel, ylabel, guidecolor, byobj) {
data.km <- cbind(x1 = xname, x2 = yname)
kclusts <- data.frame(kmax=1:kmax) %>% group_by(kmax) %>% do(kclust=kmeans(data.km, .$kmax))
#do kmeans on data for each k-number of clusters
assignments <- kclusts %>% group_by(kmax) %>% do(augment(.$kclust[[1]], data.km))
twkm <- ggplot(assignments, aes_string(x = "x1", y = "x2")) + geom_point(aes(color= .cluster)) +
facet_wrap(~ kmax) + xlab(xlabel) + ylab(ylabel) +
guides(color = guide_legend(title = guidecolor, title.position = "left", nrow=1)) +
theme(legend.position="bottom")
twkm
}
twoway_kmeans(hello$Distance, hello$Deep_Sleep, 5,
"Distance (km)", "Deep Sleep (%)", "Cluster(s) by Color")
twoway_kmeans(hello$Distance, hello$Deep_Sleep, 5,
"Distance (km)", "Deep Sleep (%)", "Cluster(s) by Color", hello$Class)
twoway_kmeans <- function(xname, yname, kmax, xlabel, ylabel, guidecolor, byobj) {
data.km <- cbind(x1 = xname, x2 = yname)
kclusts <- data.frame(kmax=1:kmax) %>% group_by(kmax) %>% do(kclust=kmeans(data.km, .$kmax))
#do kmeans on data for each k-number of clusters
assignments <- kclusts %>% group_by(kmax) %>% do(augment(.$kclust[[1]], data.km))
twkm <- ggplot(assignments, aes_string(x = "x1", y = "x2")) + geom_point(aes(color= .cluster)) +
facet_wrap(~ kmax) + xlab(xlabel) + ylab(ylabel) +
guides(color = guide_legend(title = guidecolor, title.position = "left", nrow=1)) +
theme(legend.position="bottom")
twkm + geom_text(aes(label=byobj),hjust=0, vjust=0, cex=3)
}
twoway_kmeans(hello$Distance, hello$Deep_Sleep, 5,
"Distance (km)", "Deep Sleep (%)", "Cluster(s) by Color", hello$Class)
data.km <- cbind(x1 = xname, x2 = yname)
ggplot(hello, x = hello$Distance, y = hello$Deep_Sleep) +
geom_point()
ggplot(hello, aes(x = hello$Distance, y = hello$Deep_Sleep)) +
geom_point()
ggplot(hello, aes(color = factor(hello$Class))) +
geom_point()
ggplot(hello, aes(x = hello$Distance, y = hello$Deep_Sleep)) +
geom_point(aes(color = factor(hello$Class)))
ggplot(hello, aes(x = hello$Distance, y = hello$Deep_Sleep)) +
geom_point(aes(color = factor(hello$Class))) + xlab("Distance (km)") +
ylab("% Deep Sleep") + guides(color = guide_legend(title = "Subgroups", title.position = "top"))
twoway_kmeans(hello$Distance, hello$Deep_Sleep, 5,
"Distance (km)", "Deep Sleep (%)", "Cluster(s) by Color")
twoway_kmeans(hello$Distance, hello$Deep_Sleep, 5,
"Distance (km)", "Deep Sleep (%)")
twoway_kmeans(hello$Distance, hello$Deep_Sleep, 5,
"Distance (km)", "Deep Sleep (%)", "Cluster(s) by Color")
twoway_kmeans <- function(xname, yname, kmax, xlabel, ylabel, guidecolor) {
data.km <- cbind(x1 = xname, x2 = yname)
kclusts <- data.frame(kmax=1:kmax) %>% group_by(kmax) %>% do(kclust=kmeans(data.km, .$kmax))
#do kmeans on data for each k-number of clusters
assignments <- kclusts %>% group_by(kmax) %>% do(augment(.$kclust[[1]], data.km))
twkm <- ggplot(assignments, aes_string(x = "x1", y = "x2")) + geom_point(aes(color= .cluster)) +
facet_wrap(~ kmax) + xlab(xlabel) + ylab(ylabel) +
guides(color = guide_legend(title = guidecolor, title.position = "left", nrow=1)) +
theme(legend.position="bottom")
twkm
}
twoway_kmeans(hello$Distance, hello$Deep_Sleep, 5,
"Distance (km)", "Deep Sleep (%)", "Cluster(s) by Color")
